{
    "metadata": {
        "kernelspec": {
            "language": "python", 
            "display_name": "Python 3.5 (Experimental) with Spark 2.1", 
            "name": "python3-spark21"
        }, 
        "language_info": {
            "version": "3.5.2", 
            "nbconvert_exporter": "python", 
            "codemirror_mode": {
                "version": 3, 
                "name": "ipython"
            }, 
            "mimetype": "text/x-python", 
            "name": "python", 
            "pygments_lexer": "ipython3", 
            "file_extension": ".py"
        }
    }, 
    "nbformat": 4, 
    "cells": [
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<div><img src=\"https://www.ibm.com/blogs/bluemix/wp-content/uploads/2017/02/NLU.png\", width=170, height=170, align = 'right'> \n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/IBM_logo.svg/640px-IBM_logo.svg.png\", width = 90, height = 90, align = 'right', style=\"margin:0px 25px\"></div>\n\n# \u822a\u7a7a\u516c\u53f8\u5ba2\u6237\u4ef7\u503c\u5206\u6790\uff08\u6848\u4f8b\uff09\n\u672c\u6587\u6f14\u793a\u822a\u7a7a\u516c\u53f8\u5bf9\u4e0d\u540c\u4ef7\u503c\u7684\u5ba2\u6237\u8fdb\u884c\u5206\u7c7b\u5206\u6790\u7684\u65b9\u6cd5\u3002\uff08\u6587\u4e2d\u6240\u7528\u4e3a\u6a21\u62df\u6570\u636e\uff09<br>\nThis notebook runs on Python 3.5 with Spark 2.1.\n___________"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "## \u5185\u5bb9\u5217\u8868\n\n1.  [\u5b9e\u73b0\u76ee\u6807](#lrfmc_1)<br>\n2.  [\u6570\u636e\u63a2\u7d22](#lrfmc_2)<br>\n3.  [\u6570\u636e\u5904\u7406](#lrfmc_3) <br>\n 3.1.  [\u6570\u636e\u6e05\u6d17\uff0c\u8fc7\u6ee4\u6389\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u6570\u636e](#lrfmc_3_1) <br>\n 3.2.  [\u6570\u636e\u8f6c\u6362](#lrfmc_3_2) <br>\n 3.3.  [\u6807\u51c6\u5dee\u6807\u51c6\u5316](#lrfmc_3_3) <br>\n4.  [\u6a21\u578b\u6784\u5efa](#lrfmc_4) <br>\n 4.1.  [K-Means\u805a\u7c7b\u7b97\u6cd5,\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b](#lrfmc_4_1) <br>\n 4.2.  [\u805a\u7c7b\u7ed3\u679c\u5206\u6790](#lrfmc_4_2) <br>\n 4.3.  [\u5ba2\u6237\u7c7b\u578b\u7279\u5f81\u7edf\u8ba1](#lrfmc_4_3) <br>\n5.  [\u6a21\u578b\u62df\u5408\u539f\u6570\u636e](#lrfmc_5) <br>\n 5.1.  [\u5c06\u5ba2\u6237\u5206\u7c7b\u7c7b\u578b\u62df\u5408\u5230\u539f\u6570\u636e](#lrfmc_5_1) <br>\n 5.2.  [\u5404\u5ba2\u6237\u7c7b\u578b\u6570\u91cf\u7edf\u8ba1](#lrfmc_5_2) <br>\n 5.3. [\u9488\u5bf9(\u91cd\u8981\u53d1\u5c55\u5ba2\u6237)\u505a\u5730\u5740\u548c\u5e74\u9f84\u5206\u5e03\u7edf\u8ba1](#lrfmc_5_3) <br>"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": " <a id=\"lrfmc_1\"></a>\n# 1.\u6839\u636e\u5ba2\u6237\u6570\u636e,\u5b9e\u73b0\u4ee5\u4e0b\u76ee\u6807:\n- \u501f\u52a9\u822a\u7a7a\u516c\u53f8\u6570\u636e,\u5bf9\u5ba2\u6237\u8fdb\u884c\u5206\u7c7b<br>\n- \u5bf9\u4e0d\u540c\u7684\u5ba2\u6237\u8fdb\u884c\u7279\u5f81\u5206\u6790,\u6bd4\u8f83\u4e0d\u540c\u7684\u5ba2\u6237\u4ef7\u503c<br>\n- \u5bf9\u4e0d\u540c\u5ba2\u6237\u4ef7\u503c\u7684\u5ba2\u6237\u63d0\u4f9b\u4e0d\u540c\u670d\u52a1,\u6307\u5b9a\u76f8\u5e94\u7684\u8425\u9500\u7b56\u7565<br>"
        }, 
        {
            "execution_count": 290, 
            "metadata": {
                "collapsed": true
            }, 
            "cell_type": "code", 
            "outputs": [], 
            "source": "import pandas as pd\nfrom sklearn.cluster import KMeans\nfrom io import StringIO\nimport requests\nimport json\nimport numpy as np\nimport brunel\nimport matplotlib.pyplot as plt\nfrom math import pi\nimport seaborn as sns "
        }, 
        {
            "execution_count": 291, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "execution_count": 291, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>\u4f1a\u5458\u5361\u53f7</th>\n      <th>\u5165\u4f1a\u65f6\u95f4</th>\n      <th>\u6027\u522b</th>\n      <th>\u5de5\u4f5c\u5730\u6240\u5728\u7701\u4efd</th>\n      <th>\u5e74\u9f84</th>\n      <th>\u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4</th>\n      <th>\u89c2\u6d4b\u7a97\u53e3\u5185\u7684\u98de\u884c\u6b21\u6570</th>\n      <th>\u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u516c\u91cc\u6570</th>\n      <th>\u5e73\u5747\u6298\u6263\u7387</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>54993</td>\n      <td>2006/11/02</td>\n      <td>\u7537</td>\n      <td>\u5317\u4eac</td>\n      <td>31.0</td>\n      <td>2014/03/31</td>\n      <td>210</td>\n      <td>580717</td>\n      <td>0.961639</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28065</td>\n      <td>2007/02/19</td>\n      <td>\u7537</td>\n      <td>\u5317\u4eac</td>\n      <td>42.0</td>\n      <td>2014/03/31</td>\n      <td>140</td>\n      <td>293678</td>\n      <td>1.252314</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>55106</td>\n      <td>2007/02/01</td>\n      <td>\u7537</td>\n      <td>\u5317\u4eac</td>\n      <td>40.0</td>\n      <td>2014/03/31</td>\n      <td>135</td>\n      <td>283712</td>\n      <td>1.254676</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21189</td>\n      <td>2008/08/22</td>\n      <td>\u7537</td>\n      <td>CA</td>\n      <td>64.0</td>\n      <td>2014/03/31</td>\n      <td>23</td>\n      <td>281336</td>\n      <td>1.090870</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>39546</td>\n      <td>2009/04/10</td>\n      <td>\u7537</td>\n      <td>\u8d35\u5dde</td>\n      <td>48.0</td>\n      <td>2014/03/31</td>\n      <td>152</td>\n      <td>309928</td>\n      <td>0.970658</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "    \u4f1a\u5458\u5361\u53f7        \u5165\u4f1a\u65f6\u95f4 \u6027\u522b \u5de5\u4f5c\u5730\u6240\u5728\u7701\u4efd    \u5e74\u9f84   \u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4  \u89c2\u6d4b\u7a97\u53e3\u5185\u7684\u98de\u884c\u6b21\u6570  \u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u516c\u91cc\u6570  \\\n0  54993  2006/11/02  \u7537      \u5317\u4eac  31.0  2014/03/31         210       580717   \n1  28065  2007/02/19  \u7537      \u5317\u4eac  42.0  2014/03/31         140       293678   \n2  55106  2007/02/01  \u7537      \u5317\u4eac  40.0  2014/03/31         135       283712   \n3  21189  2008/08/22  \u7537      CA  64.0  2014/03/31          23       281336   \n4  39546  2009/04/10  \u7537      \u8d35\u5dde  48.0  2014/03/31         152       309928   \n\n      \u5e73\u5747\u6298\u6263\u7387  \n0  0.961639  \n1  1.252314  \n2  1.254676  \n3  1.090870  \n4  0.970658  "
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "# The code was removed by DSX for sharing."
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_2\"></a>\n# 2.\u5bf9\u6570\u636e\u8fdb\u884c\u57fa\u672c\u7684\u63a2\u7d22\n### \u68c0\u67e5\u7a7a\u503c\u4ee5\u53ca\u6700\u5c0f\u503c"
        }, 
        {
            "execution_count": 292, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "                        \u7a7a\u503c\u6570       \u6700\u5927\u503c \u6700\u5c0f\u503c\nRation_L1Y_Flight_Count   0         1   0\nRation_P1Y_Flight_Count   0         1   0\nRation_P1Y_BPS            0  0.999989   0\nRation_L1Y_BPS            0  0.999993   0\nPoint_NotFlight           0       140   0\n"
                }, 
                {
                    "output_type": "stream", 
                    "name": "stderr", 
                    "text": "/usr/local/src/conda3_runtime.v21/4.1.1/lib/python3.5/site-packages/numpy/lib/function_base.py:3834: RuntimeWarning: Invalid value encountered in percentile\n  RuntimeWarning)\n"
                }
            ], 
            "source": "data_7_1 = df_data_1.describe(percentiles = [], include = 'all').T #\u5305\u62ec\u5bf9\u6570\u636e\u7684\u57fa\u672c\u63cf\u8ff0\uff0cpercentiles\u53c2\u6570\u662f\u6307\u5b9a\u8ba1\u7b97\u591a\u5c11\u7684\u5206\u4f4d\u6570\u8868\uff08\u59821/4\u5206\u4f4d\u6570\u3001\u4e2d\u4f4d\u6570\u7b49\uff09\uff1bT\u662f\u8f6c\u7f6e\uff0c\u8f6c\u7f6e\u540e\u66f4\u65b9\u4fbf\u67e5\u9605\ndata_7_1['null'] = len(df_data_1)-data_7_1['count'] #describe()\u51fd\u6570\u81ea\u52a8\u8ba1\u7b97\u975e\u7a7a\u503c\u6570\uff0c\u9700\u8981\u624b\u52a8\u8ba1\u7b97\u7a7a\u503c\u6570\n\ndata_7_1 = data_7_1[['null', 'max', 'min']]\ndata_7_1.columns = [u'\u7a7a\u503c\u6570', u'\u6700\u5927\u503c', u'\u6700\u5c0f\u503c'] #\u8868\u5934\u91cd\u547d\u540d\n'''\u8fd9\u91cc\u53ea\u9009\u53d6\u90e8\u5206\u63a2\u7d22\u7ed3\u679c\u3002\ndescribe()\u51fd\u6570\u81ea\u52a8\u8ba1\u7b97\u7684\u5b57\u6bb5\u6709count\uff08\u975e\u7a7a\u503c\u6570\uff09\u3001unique\uff08\u552f\u4e00\u503c\u6570\uff09\u3001top\uff08\u9891\u6570\u6700\u9ad8\u8005\uff09\u3001freq\uff08\u6700\u9ad8\u9891\u6570\uff09\u3001mean\uff08\u5e73\u5747\u503c\uff09\u3001std\uff08\u65b9\u5dee\uff09\u3001min\uff08\u6700\u5c0f\u503c\uff09\u300150%\uff08\u4e2d\u4f4d\u6570\uff09\u3001max\uff08\u6700\u5927\u503c\uff09\n'''\nprint(data_7_1.tail(5))"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_3\"></a>\n# 3.\u6570\u636e\u5904\u7406\n<a id=\"lrfmc_3_1\"></a>\n### 3.1 \u6570\u636e\u6e05\u6d17\uff0c\u8fc7\u6ee4\u6389\u4e0d\u7b26\u5408\u89c4\u5219\u7684\u6570\u636e<br>\n\u4e22\u5f03\u7968\u4ef7\u4e3a\u7a7a\u7684\u8bb0\u5f55<br>\n\u4e22\u5f03\u7968\u4ef7\u4e3a0,\u5e73\u5747\u6298\u6263\u7387\u4e3a0,\u603b\u98de\u884c\u516c\u91cc\u6570\u5927\u4e8e0\u7684\u8bb0\u5f55"
        }, 
        {
            "execution_count": 293, 
            "metadata": {
                "scrolled": true
            }, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "   MEMBER_NO    FFP_DATE FIRST_FLIGHT_DATE GENDER  FFP_TIER    WORK_CITY  \\\n0      54993  2006/11/02        2008/12/24      \u7537         6            .   \n1      28065  2007/02/19        2007/08/03      \u7537         6          NaN   \n2      55106  2007/02/01        2007/08/30      \u7537         6            .   \n3      21189  2008/08/22        2008/08/23      \u7537         5  Los Angeles   \n4      39546  2009/04/10        2009/04/15      \u7537         6           \u8d35\u9633   \n\n  WORK_PROVINCE WORK_COUNTRY   AGE   LOAD_TIME       ...         \\\n0            \u5317\u4eac           CN  31.0  2014/03/31       ...          \n1            \u5317\u4eac           CN  42.0  2014/03/31       ...          \n2            \u5317\u4eac           CN  40.0  2014/03/31       ...          \n3            CA           US  64.0  2014/03/31       ...          \n4            \u8d35\u5dde           CN  48.0  2014/03/31       ...          \n\n   ADD_Point_SUM  Eli_Add_Point_Sum  L1Y_ELi_Add_Points  Points_Sum  \\\n0          39992             114452              111100      619760   \n1          12000              53288               53288      415768   \n2          15491              55202               51711      406361   \n3              0              34890               34890      372204   \n4          22704              64969               64969      338813   \n\n   L1Y_Points_Sum  Ration_L1Y_Flight_Count  Ration_P1Y_Flight_Count  \\\n0          370211                 0.509524                 0.490476   \n1          238410                 0.514286                 0.485714   \n2          233798                 0.518519                 0.481481   \n3          186100                 0.434783                 0.565217   \n4          210365                 0.532895                 0.467105   \n\n   Ration_P1Y_BPS Ration_L1Y_BPS  Point_NotFlight  \n0        0.487221       0.512777               50  \n1        0.489289       0.510708               33  \n2        0.481467       0.518530               26  \n3        0.551722       0.448275               12  \n4        0.469054       0.530943               39  \n\n[5 rows x 44 columns]\n"
                }
            ], 
            "source": "data_7_2 = df_data_1.copy()\ndata_7_2 = data_7_2[data_7_2['SUM_YR_1'].notnull() & data_7_2['SUM_YR_2'].notnull()] #\u7968\u4ef7\u975e\u7a7a\u503c\u624d\u4fdd\u7559\n\n#\u53ea\u4fdd\u7559\u7968\u4ef7\u975e\u96f6\u7684\uff0c\u6216\u8005\u5e73\u5747\u6298\u6263\u7387\u4e0e\u603b\u98de\u884c\u516c\u91cc\u6570\u540c\u65f6\u4e3a0\u7684\u8bb0\u5f55\u3002\nindex1 = data_7_2['SUM_YR_1'] != 0\nindex2 = data_7_2['SUM_YR_2'] != 0\nindex3 = (data_7_2['SEG_KM_SUM'] == 0) & (data_7_2['avg_discount'] == 0) #\u8be5\u89c4\u5219\u662f\u201c\u4e0e\u201d\ndata_7_2 = data_7_2[index1 | index2 | index3] #\u8be5\u89c4\u5219\u662f\u201c\u6216\u201d\nprint(data_7_2.head(5))"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_3_2\"></a>\n### 3.2 \u6570\u636e\u8f6c\u6362\n#### LRFMC\u662f\u9a8c\u8bc1\u5ba2\u6237\u662f\u5426\u662f\u4f18\u8d28\u5ba2\u6237\u7684\u6307\u6807\n-  L = LOAD_TIME - FFP_DATE  -- \u4f1a\u5458\u5165\u4f1a\u65f6\u95f4\u8ddd\u89c2\u6d4b\u7a97\u53e3\u7ed3\u675f\u7684\u6708\u6570 = \u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4 - \u5165\u4f1a\u65f6\u95f4<br>\n-  R = LAST_TO_END        -- \u6700\u8fd1\u4e00\u6b21\u4e58\u5750\u8ddd\u89c2\u6d4b\u7a97\u53e3\u7ed3\u675f\u7684\u6708\u6570 = \u6700\u8fd1\u4e00\u6b21\u4e58\u5750\u65f6\u95f4\u81f3\u89c2\u5bdf\u7a97\u53e3\u672b\u7aef\u65f6\u957f<br>\n-  F = FLIGHT_COUNT       -- \u5ba2\u6237\u5728\u89c2\u5bdf\u7a97\u53e3\u5185\u4e58\u5750\u6b21\u6570 = \u89c2\u6d4b\u7a97\u53e3\u7684\u98de\u884c\u6b21\u6570<br>\n-  M = SEG_KM_SUM        -- \u5ba2\u6237\u5728\u89c2\u5bdf\u7a97\u53e3\u5185\u7d2f\u8ba1\u98de\u884c\u91cc\u7a0b = \u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u91cc\u6570<br>\n-  C = avg_discount       -- \u5ba2\u6237\u5728\u89c2\u5bdf\u7a97\u53e3\u5185\u4e58\u5750\u8231\u4f4d\u6298\u6263\u7cfb\u6570\u5e73\u5747\u503c = \u5e73\u5747\u6298\u6263\u7387<br>"
        }, 
        {
            "execution_count": 294, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "       L     R    F       M     C\n0  90.20  0.03  210  580717  0.96\n1  86.57  0.23  140  293678  1.25\n2  87.17  0.37  135  283712  1.25\n3  68.23  3.23   23  281336  1.09\n4  60.53  0.17  152  309928  0.97\n"
                }
            ], 
            "source": "data_7_2_rst = pd.DataFrame()\ndata_7_2_rst['L'] = pd.to_datetime(data_7_2['LOAD_TIME']) - pd.to_datetime(data_7_2['FFP_DATE'])\ndata_7_2_rst['L'] = data_7_2_rst.L.map(lambda x: x/np.timedelta64(1*60*60*24*30, 's'))\ndata_7_2_rst['R'] = data_7_2['LAST_TO_END'] / 30\ndata_7_2_rst['F'] = data_7_2['FLIGHT_COUNT']\ndata_7_2_rst['M'] = data_7_2['SEG_KM_SUM']\ndata_7_2_rst['C'] = data_7_2['avg_discount']\ndata_7_2_rst = data_7_2_rst.round(2)\nprint (data_7_2_rst.head(5))"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_3_3\"></a>\n### 3.3 \u6807\u51c6\u5dee\u6807\u51c6\u5316"
        }, 
        {
            "execution_count": 295, 
            "metadata": {
                "scrolled": true
            }, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "         ZL        ZR         ZF         ZM        ZC\n0  1.435706 -0.945491  14.034016  26.761154  1.286487\n1  1.307268 -0.912438   9.073213  13.126864  2.855183\n2  1.328498 -0.889301   8.718869  12.653481  2.855183\n3  0.658357 -0.416644   0.781585  12.540622  1.989695\n4  0.385913 -0.922354   9.923636  13.898736  1.340580\n"
                }
            ], 
            "source": "data_7_3 = (data_7_2_rst - data_7_2_rst.mean(axis = 0))/(data_7_2_rst.std(axis = 0)) #\u7b80\u6d01\u7684\u8bed\u53e5\u5b9e\u73b0\u4e86\u6807\u51c6\u5316\u53d8\u6362\uff0c\u7c7b\u4f3c\u5730\u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55\u60f3\u8981\u7684\u53d8\u6362\u3002\ndata_7_3.columns=['Z'+i for i in data_7_3.columns] #\u8868\u5934\u91cd\u547d\u540d\u3002\nprint(data_7_3.head(5))"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_4\"></a>\n# 4.\u6a21\u578b\u6784\u5efa\n<a id=\"lrfmc_4_1\"></a>\n#### 4.1 K-Means\u805a\u7c7b\u7b97\u6cd5,\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u7c7b"
        }, 
        {
            "execution_count": 296, 
            "metadata": {
                "scrolled": true
            }, 
            "cell_type": "code", 
            "outputs": [
                {
                    "execution_count": 296, 
                    "metadata": {}, 
                    "data": {
                        "text/plain": "KMeans(copy_x=True, init='k-means++', max_iter=300, n_clusters=5, n_init=10,\n    n_jobs=1, precompute_distances='auto', random_state=None, tol=0.0001,\n    verbose=0)"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "k = 5        #\u9700\u8981\u8fdb\u884c\u7684\u805a\u7c7b\u7c7b\u522b\u6570,\u8fd9\u4e2ademo\u5373\u4f1a\u751f\u6210 k \u79cd\u7c7b\u578b\u7684\u5ba2\u6237\n#\u8c03\u7528k-means\u7b97\u6cd5\uff0c\u8fdb\u884c\u805a\u7c7b\u5206\u6790\nkmodel = KMeans(n_clusters = k, n_jobs = 1) #n_jobs\u662f\u5e76\u884c\u6570\uff0c\u4e00\u822c\u7b49\u4e8eCPU\u6570\u8f83\u597d\nkmodel.fit(data_7_3) #\u8bad\u7ec3\u6a21\u578b"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_4_2\"></a>\n#### 4.2 \u805a\u7c7b\u7ed3\u679c\u5206\u6790:\n- \u91cd\u8981\u4fdd\u6301\u5ba2\u6237:<br>\n    \u8fd9\u7c7b\u5ba2\u6237\u5e73\u5747\u6298\u6263\u7387(C)\u8f83\u9ad8(\u4e58\u5750\u7684\u822a\u73ed\u8231\u4f4d\u7b49\u7ea7\u9ad8),\u6700\u8fd1\u4e58\u5750\u672c\u516c\u53f8\u822a\u73ed(R)\u4f4e,\u6b21\u6570(F)\u9ad8\u6216\u8005\u91cc\u7a0b(M)\u8f83\u9ad8,\u8fd9\u7c7b\u5ba2\u6237\u8d21\u732e\u5927,\u4f46\u662f\u6bd4\u4f8b\u5c0f,\u662f\u7406\u60f3\u5ba2\u6237\u7c7b\u578b<br>\n- \u91cd\u8981\u53d1\u5c55\u5ba2\u6237:<br>\n    \u8fd9\u7c7b\u5ba2\u6237\u5e73\u5747\u6298\u6263\u7387(C)\u8f83\u9ad8,\u6700\u8fd1\u4e58\u5750\u672c\u516c\u53f8\u822a\u73ed(R)\u4f4e,\u6b21\u6570(F)\u9ad8\u6216\u8005\u91cc\u7a0b(M)\u8f83\u4f4e,\u5165\u4f1a\u65f6\u95f4(L)\u77ed,\u8fd9\u7c7b\u5ba2\u6237\u5f53\u524d\u4ef7\u503c\u4e0d\u9ad8,\u4f46\u662f\u6709\u5f88\u5927\u53d1\u5c55\u6f5c\u529b<br>\n- \u91cd\u8981\u633d\u7559\u5ba2\u6237:<br>\n    \u8fd9\u7c7b\u5ba2\u6237\u5e73\u5747\u6298\u6263\u7387(C),\u6b21\u6570(F)\u9ad8\u6216\u8005\u91cc\u7a0b(M)\u8f83\u9ad8,\u4f46\u957f\u65f6\u95f4\u6ca1\u6709\u5750\u8fc7\u822a\u73ed\u6216\u8005\u4e58\u5750\u9891\u7387\u53d8\u5c0f(R)\u9ad8,\u8fd9\u7c7b\u5ba2\u6237\u4ef7\u503c\u53d8\u5316\u4e0d\u786e\u5b9a,\u5ba2\u6237\u8870\u9000\u539f\u56e0\u5404\u4e0d\u76f8\u540c,\u516c\u53f8\u5e94\u6839\u636e\u5ba2\u6237\u5f02\u5e38\u6d88\u8d39\u5217\u51fa\u5ba2\u6237\u540d\u5355\u91cd\u70b9\u8054\u7cfb<br>\n- \u4e00\u822c\u4e0e\u4f4e\u4ef7\u503c\u5ba2\u6237:<br>\n    \u8fd9\u7c7b\u5ba2\u6237\u5e73\u5747\u6298\u6263\u7387(C)\u5f88\u4f4e,\u4f46\u957f\u65f6\u95f4\u6ca1\u6709\u5750\u8fc7\u822a\u73ed(R)\u9ad8,\u6b21\u6570(F)\u9ad8\u6216\u8005\u91cc\u7a0b(M)\u8f83\u4f4e,\u5165\u4f1a\u65f6\u95f4(L)\u77ed,\u8fd9\u7c7b\u5ba2\u6237\u662f\u4e00\u822c\u4f4e\u4ef7\u503c\u5ba2\u6237,\u5076\u5c14\u4e58\u5750\u6216\u8005\u5728\u6253\u6298\u4fc3\u9500\u65f6\u624d\u4f1a\u4e58\u5750\u672c\u516c\u53f8\u822a\u73ed<br>\n    \n##### \u6839\u636e\u5206\u6790\u7684\u5ba2\u6237\u7c7b\u578b\u53ef\u4ee5\u770b\u51fa\u6a21\u578b\u5bfc\u51fa\u7684\u4e94\u79cd\u5ba2\u6237\u7c7b\u578b:\n- \u4e00\u822c\u5ba2\u6237(General_Customer): \u5165\u4f1a\u65f6\u95f4(L)\u77ed,\u6298\u6263\u7387(C)\u4f4e,\u6b21\u6570(F)\u91cc\u7a0b(M)\u8f83\u9ad8,\u5c5e\u4e8e\u4e00\u822c\u5ba2\u6237\n- \u4f4e\u4ef7\u503c\u5ba2\u6237(Low_Value_Customer): \u5165\u4f1a\u65f6\u95f4(L)\u77ed,,(R)\u9ad8,\u53ea\u662f\u6700\u8fd1\u5165\u4f1a\u800c\u4e14\u5076\u5c14\u4e58\u5750,\u5c5e\u4e8e\u4f4e\u4ef7\u503c\u5ba2\u6237\n- \u91cd\u8981\u53d1\u5c55\u5ba2\u6237(Important_Develop_Customer): \u6298\u6263\u7387(C)\u9ad8,\u5165\u4f1a\u65f6\u95f4(L)\u4e2d\u89c4\u4e2d\u77e9,\u4f46\u662f\u6b21\u6570(F)\u91cc\u7a0b(M)\u8f83\u4f4e,\u8bf4\u660e\u521a\u5f00\u59cb\u4e58\u5750\u672c\u516c\u53f8\u822a\u73ed,\u4f46\u6709\u4ef7\u503c,\u5c5e\u4e8e\u91cd\u8981\u53d1\u5c55\u5ba2\u6237\n- \u91cd\u8981\u4fdd\u6301\u5ba2\u6237(Important_Keep_Customer): \u5165\u4f1a\u65f6\u95f4(L)\u6b21\u6570(F)\u91cc\u7a0b(M)\u5e73\u5747\u6298\u6263\u7387(C)\u90fd\u9ad8,(R)\u4f4e,\u8bf4\u660e\u7ecf\u5e38\u505a\u800c\u4e14\u8231\u4f4d\u8f83\u9ad8,\u5c5e\u4e8e\u91cd\u8981\u4fdd\u6301\u5ba2\u6237\n- \u91cd\u8981\u633d\u7559\u5ba2\u6237(Important_Retention_Customer): \u5165\u4f1a\u65f6\u95f4(L)\u8f83\u957f,\u540c\u65f6\u6b21\u6570(F)\u91cc\u7a0b(M)\u7565\u9ad8,\u5c5e\u4e8e\u91cd\u8981\u633d\u7559\u5ba2\u6237"
        }, 
        {
            "execution_count": 297, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "\u5ba2\u6237\u7c7b\u578b\u79cd\u7c7b:           L         R         F         M         C  TYPE\n1 -0.700307 -0.415140 -0.160698 -0.160413 -0.256626     1\n3 -0.313488  1.686675 -0.573887 -0.536642 -0.174768     3\n2  0.048957 -0.002689 -0.231202 -0.235696  2.174986     2\n4  0.483497 -0.799418  2.482365  2.423564  0.310140     4\n0  1.160955 -0.377460 -0.086935 -0.094890 -0.157873     0\n\u6bcf\u4e2a\u5ba2\u6237\u6240\u5bf9\u5e94\u7684\u5ba2\u6237\u7c7b\u578b: [4 4 4 ..., 1 3 3]\n"
                }
            ], 
            "source": "kmodel_type = kmodel.cluster_centers_  #\u805a\u7c7b\u4ea7\u751f\u7684 k \u79cd\u5ba2\u6237\u7c7b\u578b(\u6bcf\u6b21\u8fd4\u56de\u7684\u6570\u636e\u7684\u987a\u5e8f\u53ef\u80fd\u4e0d\u540c)\nkmodel_value = kmodel.labels_           #\u6bcf\u6761\u6570\u636e\u5bf9\u5e94\u805a\u7c7b\u7684\u7ed3\u679c\n\ndf_kmodel_type = pd.DataFrame(kmodel_type)\ndf_kmodel_type['TYPE'] = [x for x in range(5)] #\u5ba2\u6237\u7c7b\u578b\u6807\u7b7e\ndf_kmodel_type.columns = ['L','R','F','M','C','TYPE']\ndf_kmodel_type = df_kmodel_type.sort_values(by=['L'])\\\n\nprint(\"\u5ba2\u6237\u7c7b\u578b\u79cd\u7c7b:\",df_kmodel_type)\nprint(\"\u6bcf\u4e2a\u5ba2\u6237\u6240\u5bf9\u5e94\u7684\u5ba2\u6237\u7c7b\u578b:\",kmodel_value)"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_4_3\"></a>\n#### 4.3 \u5ba2\u6237\u7c7b\u578b\u7279\u5f81\u7edf\u8ba1"
        }, 
        {
            "execution_count": 298, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "metadata": {}, 
                    "output_type": "display_data", 
                    "data": {
                        "text/plain": "<matplotlib.figure.Figure at 0x7f7211d37978>", 
                        "image/png": "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\nJbjhhhtw3XXX4aGHHkJlZSXuuOMOAHaEWVNTg7lz5wKwI/T169dj6tSuq+IBO009d+5cHD582JE+\nz6cn+fnnn4+rr74a5557Lk444QTIsgwAOP7447Fr1y584xvfAGAL7F133YXKysqcY7j33ntx2223\n4X//938hSRJqa2tx/fXXY+TIkTjjjDNw1llnYfTo0am19Gg0iquvvjoVoSfXvZcsWYIbbrgBjz32\nGH73u9/hzjvvxE033YREIoExY8akPqvuounkuYkTJ+Kaa67BZZddBtM0wfM8brrpJowaNYpG4xQK\nheISqCEMhUKhUChljOtT6xQKhUKhULrG9an1QvH0009j9erVjpTw/PnzccMNN5RsDOFwGJdccklq\nDMnlgkceeQTBYLBk46BQKBTK4IGm1ikUCoVCKWNoap1CoVAolDKGCjmFQqFQKGUMFXIKhUKhUMoY\n1wt5MduY5qKhocHRRKUv/PnPf07t7+6KxYsX45xzzsHZZ5+Ns846C7/73e+gqmq/XjcXhf78YrEY\nbrzxRpx66qlYsWIFLr744m5bvnbF5s2b8cEHHxR0bBQKhTIUcb2Ql9J4xDAM7N27tyBCHo/Hu72G\nEIJHH30U69atw5o1a/Dll1/ixhtv7NfrdvU6heRnP/sZKioq8NJLL2Ht2rW444470NLS0uvnGQgh\nT1rpUigUymAir+1n4Y8+xq4/PoD43mxns/4gj67FhCu+i9DsrpuaJNm8eTPuuece+P1+1NXV4fTT\nT8eUKVOwevVqKIqC++67D2PGjMGqVasgCAI++eQTtLe347rrrsOiRYugqipuuukmfPLJJ+B5Hj/5\nyU9wzDHH4JlnnsGLL76IWCwG0zShqip27tyJZcuW4dxzz8Upp5yCa6+9NiXMN954I+bOnZsaT0VF\nBerq6jBz5kzcddddePTRR3Hw4EFcfPHFqKio6NL/PNl1CQBkWcbPf/5zLFq0CG1tbQgEAnjwwQex\nYcMGaJqGU089Fd///vfx61//GiNHjsSFF14IwHaD83q9uPTSS3Ne35lf/vKXePvtt0EIwZVXXokl\nS5Zg8+bN+P3vfw+v14v6+noce+yxuPnmm3OOec+ePfjoo4/w61//OnWstrYWtbW1aGhowJVXXol1\n69YBAB566CHEYjF8//vfx+rVq/Hkk0+mGtL86Ec/SnVUW7duHX72s59h5MiRuP766xEOh1NufSNH\n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\n/w96gZYmr96+0AAAAABJRU5ErkJggg==\n"
                    }
                }
            ], 
            "source": "df = df_kmodel_type.iloc[:,0:5].copy()\n\n# ------- PART 1: Create background\n# number of variable\ncategories=list(df)\nN = len(categories)\n \n# What will be the angle of each axis in the plot? (we divide the plot / number of variable)\nangles = [n / float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# If you want the first axis to be on top:\nax.set_theta_offset(pi / 2)\nax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([-1,0,1,2], [\"-1\",\"0\",\"1\",\"2\"], color=\"grey\", size=10)\nplt.ylim(-1,3)\ndf['TYPE_NAME'] = [\"General_Customer\",\"Low_Value_Customer\",\"Important_Develop_Customer\",\"Important_Keep_Customer\",\"Important_Retention_Customer\"] \n# ------- PART 2: Add plots\n# \u6dfb\u52a0\u5ba2\u6237\u7c7b\u578b\u5bf9\u5e94\u7684\u7279\u5f81\u6307\u6807\nfor i in range(len(df)):\n    # Ind1\n    values=df.iloc[i:i+1,0:len(df)].values.flatten().tolist()\n    values += values[:1]\n    ax.plot(angles, values, linewidth=4, linestyle='solid', label=df.iloc[i:i+1,len(df):len(df)+1].values[0][0])\n    ax.fill(angles, values, 'b', alpha=0.1)\n    ax.set_title('Customer GROUP')\n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\nplt.show()"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "#### LRFMC\u662f\u9a8c\u8bc1\u5ba2\u6237\u662f\u5426\u662f\u4f18\u8d28\u5ba2\u6237\u7684\u6307\u6807\n-  L = LOAD_TIME - FFP_DATE  -- \u4f1a\u5458\u5165\u4f1a\u65f6\u95f4\u8ddd\u89c2\u6d4b\u7a97\u53e3\u7ed3\u675f\u7684\u6708\u6570 = \u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4 - \u5165\u4f1a\u65f6\u95f4<br>\n-  R = LAST_TO_END        -- \u6700\u8fd1\u4e00\u6b21\u4e58\u5750\u8ddd\u89c2\u6d4b\u7a97\u53e3\u7ed3\u675f\u7684\u6708\u6570 = \u6700\u8fd1\u4e00\u6b21\u4e58\u5750\u65f6\u95f4\u81f3\u89c2\u5bdf\u7a97\u53e3\u672b\u7aef\u65f6\u957f<br>\n-  F = FLIGHT_COUNT       -- \u5ba2\u6237\u5728\u89c2\u5bdf\u7a97\u53e3\u5185\u4e58\u5750\u6b21\u6570 = \u89c2\u6d4b\u7a97\u53e3\u7684\u98de\u884c\u6b21\u6570<br>\n-  M = SEG_KM_SUM        -- \u5ba2\u6237\u5728\u89c2\u5bdf\u7a97\u53e3\u5185\u7d2f\u8ba1\u98de\u884c\u91cc\u7a0b = \u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u91cc\u6570<br>\n-  C = avg_discount       -- \u5ba2\u6237\u5728\u89c2\u5bdf\u7a97\u53e3\u5185\u4e58\u5750\u8231\u4f4d\u6298\u6263\u7cfb\u6570\u5e73\u5747\u503c = \u5e73\u5747\u6298\u6263\u7387<br>"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_5\"></a>\n# 5.\u6a21\u578b\u62df\u5408\u539f\u6570\u636e\n<a id=\"lrfmc_5_1\"></a>\n### 5.1 \u5c06\u5ba2\u6237\u5206\u7c7b\u7c7b\u578b\u62df\u5408\u5230\u539f\u6570\u636e"
        }, 
        {
            "execution_count": 299, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "execution_count": 299, 
                    "metadata": {}, 
                    "data": {
                        "text/html": "<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>\u4f1a\u5458\u5361\u53f7</th>\n      <th>\u4f1a\u5458\u7c7b\u578b</th>\n      <th>\u5165\u4f1a\u65f6\u95f4</th>\n      <th>\u6027\u522b</th>\n      <th>\u5de5\u4f5c\u5730\u6240\u5728\u7701\u4efd</th>\n      <th>\u5e74\u9f84</th>\n      <th>\u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4</th>\n      <th>\u89c2\u6d4b\u7a97\u53e3\u5185\u7684\u98de\u884c\u6b21\u6570</th>\n      <th>\u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u516c\u91cc\u6570</th>\n      <th>\u5e73\u5747\u6298\u6263\u7387</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>54993</td>\n      <td>\u91cd\u8981\u4fdd\u6301\u5ba2\u6237</td>\n      <td>2006/11/02</td>\n      <td>\u7537</td>\n      <td>\u5317\u4eac</td>\n      <td>31.0</td>\n      <td>2014/03/31</td>\n      <td>210</td>\n      <td>580717</td>\n      <td>0.961639</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28065</td>\n      <td>\u91cd\u8981\u4fdd\u6301\u5ba2\u6237</td>\n      <td>2007/02/19</td>\n      <td>\u7537</td>\n      <td>\u5317\u4eac</td>\n      <td>42.0</td>\n      <td>2014/03/31</td>\n      <td>140</td>\n      <td>293678</td>\n      <td>1.252314</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>55106</td>\n      <td>\u91cd\u8981\u4fdd\u6301\u5ba2\u6237</td>\n      <td>2007/02/01</td>\n      <td>\u7537</td>\n      <td>\u5317\u4eac</td>\n      <td>40.0</td>\n      <td>2014/03/31</td>\n      <td>135</td>\n      <td>283712</td>\n      <td>1.254676</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21189</td>\n      <td>\u91cd\u8981\u4fdd\u6301\u5ba2\u6237</td>\n      <td>2008/08/22</td>\n      <td>\u7537</td>\n      <td>CA</td>\n      <td>64.0</td>\n      <td>2014/03/31</td>\n      <td>23</td>\n      <td>281336</td>\n      <td>1.090870</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>39546</td>\n      <td>\u91cd\u8981\u4fdd\u6301\u5ba2\u6237</td>\n      <td>2009/04/10</td>\n      <td>\u7537</td>\n      <td>\u8d35\u5dde</td>\n      <td>48.0</td>\n      <td>2014/03/31</td>\n      <td>152</td>\n      <td>309928</td>\n      <td>0.970658</td>\n    </tr>\n  </tbody>\n</table>\n</div>", 
                        "text/plain": "    \u4f1a\u5458\u5361\u53f7    \u4f1a\u5458\u7c7b\u578b        \u5165\u4f1a\u65f6\u95f4 \u6027\u522b \u5de5\u4f5c\u5730\u6240\u5728\u7701\u4efd    \u5e74\u9f84   \u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4  \u89c2\u6d4b\u7a97\u53e3\u5185\u7684\u98de\u884c\u6b21\u6570  \\\n0  54993  \u91cd\u8981\u4fdd\u6301\u5ba2\u6237  2006/11/02  \u7537      \u5317\u4eac  31.0  2014/03/31         210   \n1  28065  \u91cd\u8981\u4fdd\u6301\u5ba2\u6237  2007/02/19  \u7537      \u5317\u4eac  42.0  2014/03/31         140   \n2  55106  \u91cd\u8981\u4fdd\u6301\u5ba2\u6237  2007/02/01  \u7537      \u5317\u4eac  40.0  2014/03/31         135   \n3  21189  \u91cd\u8981\u4fdd\u6301\u5ba2\u6237  2008/08/22  \u7537      CA  64.0  2014/03/31          23   \n4  39546  \u91cd\u8981\u4fdd\u6301\u5ba2\u6237  2009/04/10  \u7537      \u8d35\u5dde  48.0  2014/03/31         152   \n\n   \u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u516c\u91cc\u6570     \u5e73\u5747\u6298\u6263\u7387  \n0       580717  0.961639  \n1       293678  1.252314  \n2       283712  1.254676  \n3       281336  1.090870  \n4       309928  0.970658  "
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "member_type = []\n#\u5ba2\u6237\u5206\u7c7b\u540e\u5177\u4f53\u7684\u5ba2\u6237\u7c7b\u578b\ndf_kmodel_type['TYPE_NAME'] = [\"\u4e00\u822c\u5ba2\u6237\",\"\u4f4e\u4ef7\u503c\u5ba2\u6237\",\"\u91cd\u8981\u53d1\u5c55\u5ba2\u6237\",\"\u91cd\u8981\u4fdd\u6301\u5ba2\u6237\",\"\u91cd\u8981\u633d\u7559\u5ba2\u6237\"]\nfor i in kmodel_value:\n    member_type.append(df_kmodel_type.loc[i].TYPE_NAME)\ndata_7_2.insert(1,'TYPE',member_type)\nindex_val = data_7_2.index\nmember_type_data_1 = []\nfor index, val in df_data_1.iterrows():\n    if index in (index_val.values):\n        member_type_data_1.append(data_7_2.loc[index].TYPE)\n    else:\n        #\u6570\u636e\u65e0\u6cd5\u7edf\u8ba1\u7684\u5ba2\u6237\n        member_type_data_1.append(\"NA\")\n                                  \ndf_data_1.insert(1,'TYPE',member_type_data_1)\ndf_data_3 = df_data_1.copy()\ndf_data_3.columns = ['\u4f1a\u5458\u5361\u53f7','\u4f1a\u5458\u7c7b\u578b','\u5165\u4f1a\u65f6\u95f4','\u7b2c\u4e00\u6b21\u98de\u884c\u65e5\u671f','\u6027\u522b','\u4f1a\u5458\u5361\u7ea7\u522b','\u5de5\u4f5c\u5730\u57ce\u5e02','\u5de5\u4f5c\u5730\u6240\u5728\u7701\u4efd','\u5de5\u4f5c\u5730\u6240\u5728\u56fd\u5bb6','\u5e74\u9f84','\u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4','\u89c2\u6d4b\u7a97\u53e3\u5185\u7684\u98de\u884c\u6b21\u6570','\u603b\u57fa\u672c\u79ef\u5206','\u603b\u57fa\u672c\u79ef\u5206\u5e74\u4efd1','\u603b\u57fa\u672c\u79ef\u5206\u5e74\u4efd2','\u89c2\u6d4b\u7a97\u53e3\u7684\u7968\u4ef7\u6536\u5165\u5e74\u4efd1','\u89c2\u6d4b\u7a97\u53e3\u7684\u7968\u4ef7\u6536\u5165\u5e74\u4efd2','\u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u516c\u91cc\u6570','WEIGHTED_SEG_KM','\u672b\u6b21\u98de\u884c\u65e5\u671f','\u5e73\u5747\u98de\u884c\u6b21\u6570','\u5e73\u5747\u57fa\u672c\u79ef\u5206','BEGIN_TO_FIRST','\u6700\u540e\u98de\u884c\u65f6\u95f4\u8ddd\u79bb\u89c2\u6d4b\u7a97\u53e3\u7684\u65f6\u957f','\u5e73\u5747\u4e58\u673a\u65f6\u95f4\u95f4\u9694','\u6700\u5927\u4e58\u673a\u65f6\u95f4\u95f4\u9694','ADD_POINTS_SUM_YR_1','ADD_POINTS_SUM_YR_2','\u79ef\u5206\u5151\u6362\u6b21\u6570','\u5e73\u5747\u6298\u6263\u7387','P1Y_Flight_Count','L1Y_Flight_Count','P1Y_BP_SUM','L1Y_BP_SUM','\u603b\u7cbe\u82f1\u79ef\u5206','ADD_Point_SUM','Eli_Add_Point_Sum','L1Y_ELi_Add_Points','Points_Sum','L1Y_Points_Sum','Ration_L1Y_Flight_Count','Ration_P1Y_Flight_Count','Ration_P1Y_BPS','Ration_L1Y_BPS','\u975e\u4e58\u673a\u7684\u79ef\u5206\u53d8\u52a8\u6b21\u6570']\ndf_data_3[['\u4f1a\u5458\u5361\u53f7','\u4f1a\u5458\u7c7b\u578b','\u5165\u4f1a\u65f6\u95f4','\u6027\u522b','\u5de5\u4f5c\u5730\u6240\u5728\u7701\u4efd','\u5e74\u9f84','\u89c2\u6d4b\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4','\u89c2\u6d4b\u7a97\u53e3\u5185\u7684\u98de\u884c\u6b21\u6570','\u89c2\u6d4b\u7a97\u53e3\u7684\u603b\u98de\u884c\u516c\u91cc\u6570','\u5e73\u5747\u6298\u6263\u7387']].head(5)"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "### \u5bf9\u6570\u636e\u8fdb\u884c\u7edf\u8ba1"
        }, 
        {
            "execution_count": 300, 
            "metadata": {
                "scrolled": true
            }, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "     TYPE  COUNT\n0      NA    944\n1    \u4e00\u822c\u5ba2\u6237  24633\n2   \u4f4e\u4ef7\u503c\u5ba2\u6237  12119\n3  \u91cd\u8981\u4fdd\u6301\u5ba2\u6237   5340\n4  \u91cd\u8981\u53d1\u5c55\u5ba2\u6237   4232\n5  \u91cd\u8981\u633d\u7559\u5ba2\u6237  15720\n"
                }
            ], 
            "source": "df_data_1_group = df_data_1.groupby('TYPE')\ntype_count = df_data_1_group.size().reset_index()\ntype_count.columns = ['TYPE','COUNT']\nprint(type_count)"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_5_2\"></a>\n### 5.2 \u5404\u5ba2\u6237\u7c7b\u578b\u6570\u91cf\u7edf\u8ba1"
        }, 
        {
            "execution_count": 301, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "metadata": {}, 
                    "output_type": "display_data", 
                    "data": {
                        "text/html": "<!--\n  ~ Copyright (c) 2015 IBM Corporation and others.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ You may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/brunel.2.3.css\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/sumoselect.css\">\n\n<style>\n    #visid10dec9dc-c854-11e7-a681-002590fb6b10.brunel .chart1 .label {\n\tfill: white;\n\ttext-shadow: none;\n}\n</style>\n\n<div id=\"controlsid10decba8-c854-11e7-a681-002590fb6b10\" class=\"brunel\"/>\n<svg id=\"visid10dec9dc-c854-11e7-a681-002590fb6b10\" width=\"800\" height=\"300\"></svg>", 
                        "text/plain": "<IPython.core.display.HTML object>"
                    }
                }, 
                {
                    "execution_count": 301, 
                    "metadata": {}, 
                    "data": {
                        "application/javascript": "/*\n * Copyright (c) 2015 IBM Corporation and others.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * You may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire.config({\n    waitSeconds: 60,\n    paths: {\n        'd3': '//cdnjs.cloudflare.com/ajax/libs/d3/4.2.1/d3.min',\n        'topojson': '//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.20/topojson.min',\n        'brunel' : '/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/brunel.2.3.min',\n        'brunelControls' : '/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/brunel.controls.2.3.min'\n    },\n    shim: {\n       'brunel' : {\n            exports: 'BrunelD3',\n            deps: ['d3', 'topojson'],\n            init: function() {\n               return {\n                 BrunelD3 : BrunelD3,\n                 BrunelData : BrunelData\n              }\n            }\n        },\n       'brunelControls' : {\n            exports: 'BrunelEventHandlers',\n            init: function() {\n               return {\n                 BrunelEventHandlers: BrunelEventHandlers,\n                 BrunelJQueryControlFactory: BrunelJQueryControlFactory\n              }\n            }\n        }\n\n    }\n\n});\n\nrequire([\"d3\"], function(d3) {\n    require([\"brunel\", \"brunelControls\"], function(brunel, brunelControls) {\n        function  BrunelVis(visId) {\n  \"use strict\";                                                                       // strict mode\n  var datasets = [],                                      // array of datasets for the original data\n      pre = function(d, i) { return d },                         // default pre-process does nothing\n      post = function(d, i) { return d },                       // default post-process does nothing\n      transitionTime = 200,                                        // transition time for animations\n      charts = [],                                                       // the charts in the system\n      vis = d3.select('#' + visId).attr('class', 'brunel');                     // the SVG container\n\n  BrunelD3.addDefinitions(vis);                                   // ensure standard symbols present\n\n  // Define chart #1 in the visualization //////////////////////////////////////////////////////////\n\n  charts[0] = function(parentNode, filterRows) {\n    var geom = BrunelD3.geometry(parentNode || vis.node(), 0, 0, 1, 1, 22, 60, 37, 77),\n      elements = [];                                              // array of elements in this chart\n\n    // Define groups for the chart parts ///////////////////////////////////////////////////////////\n\n    var chart =  vis.append('g').attr('class', 'chart1')\n      .attr('transform','translate(' + geom.chart_left + ',' + geom.chart_top + ')');\n    var overlay = chart.append('g').attr('class', 'element').attr('class', 'overlay');\n    var zoom = d3.zoom().scaleExtent([1/3,3]);\n    var zoomNode = overlay.append('rect').attr('class', 'overlay')\n      .attr('x', geom.inner_left).attr('y', geom.inner_top)\n      .attr('width', geom.inner_rawWidth).attr('height', geom.inner_rawHeight)\n      .style('cursor', 'move').call(zoom)\n      .node();\n    zoomNode.__zoom = d3.zoomIdentity;\n    chart.append('rect').attr('class', 'background').attr('width', geom.chart_right-geom.chart_left).attr('height', geom.chart_bottom-geom.chart_top);\n    var interior = chart.append('g').attr('class', 'interior zoomNone')\n      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')')\n      .attr('clip-path', 'url(#clip_visid10dec9dc-c854-11e7-a681-002590fb6b10_chart1_inner)');\n    interior.append('rect').attr('class', 'inner').attr('width', geom.inner_width).attr('height', geom.inner_height);\n    var gridGroup = interior.append('g').attr('class', 'grid');\n    var axes = chart.append('g').attr('class', 'axis')\n      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')');\n    var legends = chart.append('g').attr('class', 'legend')\n      .attr('transform','translate(' + (geom.chart_right-geom.chart_left - 3) + ',' + 0 + ')');\n    vis.append('clipPath').attr('id', 'clip_visid10dec9dc-c854-11e7-a681-002590fb6b10_chart1_inner').append('rect')\n      .attr('x', 0).attr('y', 0)\n      .attr('width', geom.inner_rawWidth+1).attr('height', geom.inner_rawHeight+1);\n    chart.append('text').attr('class', 'title header').text('\u822a\u7a7a\u516c\u53f8\u5ba2\u6237\u7c7b\u578b\u7edf\u8ba1').style('text-anchor', 'middle')\n      .attr('x','50%')\n      .attr('y',2).attr('dy','0.8em');\n\n    // Scales //////////////////////////////////////////////////////////////////////////////////////\n\n    var scale_x = d3.scalePoint().padding(0.5)\n      .domain(['NA', '\u4e00\u822c\u5ba2\u6237', '\u4f4e\u4ef7\u503c\u5ba2\u6237', '\u91cd\u8981\u4fdd\u6301\u5ba2\u6237', '\u91cd\u8981\u53d1\u5c55\u5ba2\u6237', '\u91cd\u8981\u633d\u7559\u5ba2\u6237'])\n      .range([0, geom.inner_width]);\n    var scale_inner = d3.scaleLinear().domain([0,1])\n      .range([-0.5, 0.5]);\n    var scale_y = d3.scaleLinear().domain([0, 30000.003])\n      .range([geom.inner_height, 0]);\n    var base_scales = [scale_x, scale_y];                           // untransformed original scales\n\n    // Axes ////////////////////////////////////////////////////////////////////////////////////////\n\n    axes.append('g').attr('class', 'x axis')\n      .attr('transform','translate(0,' + geom.inner_rawHeight + ')')\n      .attr('clip-path', 'url(#clip_visid10dec9dc-c854-11e7-a681-002590fb6b10_chart1_haxis)');\n    vis.append('clipPath').attr('id', 'clip_visid10dec9dc-c854-11e7-a681-002590fb6b10_chart1_haxis').append('polyline')\n      .attr('points', '-1,-1000, -1,-1 -5,5, -1000,5, -100,1000, 10000,1000 10000,-1000');\n    axes.select('g.axis.x').append('text').attr('class', 'title').text('\u5ba2\u6237\u79cd\u7c7b').style('text-anchor', 'middle')\n      .attr('x',geom.inner_rawWidth/2)\n      .attr('y', geom.inner_bottom - 2.0).attr('dy','-0.27em');\n    axes.append('g').attr('class', 'y axis')\n      .attr('clip-path', 'url(#clip_visid10dec9dc-c854-11e7-a681-002590fb6b10_chart1_vaxis)');\n    vis.append('clipPath').attr('id', 'clip_visid10dec9dc-c854-11e7-a681-002590fb6b10_chart1_vaxis').append('polyline')\n      .attr('points', '-1000,-10000, 10000,-10000, 10000,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+1) + ', -1,' + (geom.inner_rawHeight+5) + ', -1000,' + (geom.inner_rawHeight+5) );\n    axes.select('g.axis.y').append('text').attr('class', 'title').text('\u6570\u91cf').style('text-anchor', 'middle')\n      .attr('x',-geom.inner_rawHeight/2)\n      .attr('y', 4-geom.inner_left).attr('dy', '0.7em').attr('transform', 'rotate(270)');\n\n    var axis_bottom = d3.axisBottom(scale_x).ticks(6);\n    var axis_left = d3.axisLeft(scale_y).ticks(Math.min(10, Math.round(geom.inner_width / 20)));\n\n    function buildAxes(time) {\n      axis_bottom.tickValues(BrunelD3.filterTicks(scale_x))\n      var axis_x = axes.select('g.axis.x');\n      BrunelD3.transition(axis_x, time).call(axis_bottom.scale(scale_x));\n      var axis_y = axes.select('g.axis.y');\n      BrunelD3.transition(axis_y, time).call(axis_left.scale(scale_y));\n      BrunelD3.makeGrid(gridGroup, scale_y, geom.inner_width, false );\n    }\n    zoom.on('zoom', function(t, time) {\n        t = t ||BrunelD3.restrictZoom(d3.event.transform, geom, this);\n        scale_y = t.rescaleY(base_scales[1]);\n        zoomNode.__zoom = t;\n        interior.attr('class', 'interior ' + BrunelD3.zoomLabel(t.k));;\n        build(time || -1);\n    });\n\n    // Define element #1 ///////////////////////////////////////////////////////////////////////////\n\n    elements[0] = function() {\n      var original, processed,                           // data sets passed in and then transformed\n        element, data,                                 // brunel element information and brunel data\n        selection, merged;                                      // d3 selection and merged selection\n      var elementGroup = interior.append('g').attr('class', 'element1'),\n        main = elementGroup.append('g').attr('class', 'main'),\n        labels = BrunelD3.undoTransform(elementGroup.append('g').attr('class', 'labels').attr('aria-hidden', 'true'), elementGroup);\n\n      function makeData() {\n        original = datasets[0];\n        if (filterRows) original = original.retainRows(filterRows);\n        processed = pre(original, 0)\n          .sort('TYPE');\n        processed = post(processed, 0);\n        var f0 = processed.field('TYPE'),\n          f1 = processed.field('COUNT'),\n          f2 = processed.field('#row'),\n          f3 = processed.field('#selection');\n        var keyFunc = function(d) { return f0.value(d) };\n        data = {\n          TYPE:         function(d) { return f0.value(d.row) },\n          COUNT:        function(d) { return f1.value(d.row) },\n          $row:         function(d) { return f2.value(d.row) },\n          $selection:   function(d) { return f3.value(d.row) },\n          TYPE_f:       function(d) { return f0.valueFormatted(d.row) },\n          COUNT_f:      function(d) { return f1.valueFormatted(d.row) },\n          $row_f:       function(d) { return f2.valueFormatted(d.row) },\n          $selection_f: function(d) { return f3.valueFormatted(d.row) },\n          _split:       function(d) { return f1.value(d.row) },\n          _key:         keyFunc,\n          _rows:        BrunelD3.makeRowsWithKeys(keyFunc, processed.rowCount())\n        };\n      }\n      // Aesthetic Functions\n      var scale_color = d3.scaleLinear().domain([944, 3905.125, 6866.25, 9827.375, 12788.5, 15749.625, 18710.75, 21671.875, 24633])\n        .interpolate(d3.interpolateHcl)\n        .range([ '#045a8d', '#2b8cbe', '#74a9cf', '#bdc9e1', '#f8efe8', '#fef0d9', \n          '#fdcc8a', '#fc8d59', '#e34a33']);\n      var color = function(d) { return scale_color(data.COUNT(d)) };\n      legends._legend = legends._legend || { title: ['COUNT'], \n        ticks: [25000, 20000, 15000, 10000, 5000, 0]};\n      legends._legend.color = scale_color;\n\n      // Build element from data ///////////////////////////////////////////////////////////////////\n\n      function build(transitionMillis) {\n        element = elements[0];\n        var w = 0.9 * Math.abs(scale_x(scale_x.domain()[1]) - scale_x(scale_x.domain()[0]) );\n        var x = function(d) { return scale_x(data.TYPE(d))};\n        var h = Math.abs( scale_y(scale_y.domain()[0] + 1108.0) - scale_y.range()[0] );\n        var y1 = scale_y.range()[0];\n        var y2 = function(d) { return scale_y(data.COUNT(d))};\n        var labeling  = [{\n          index: 0, method: 'box', location: ['center', 'center'], inside: true, align: 'middle', pad: 3, dy: 0.3,\n          fit: true, granularity: 1,\n          content: function(d) {\n            return d.row == null ? null : data.COUNT_f(d)\n          }\n        }];\n\n        // Define selection entry operations\n        function initialState(selection) {\n          selection\n            .attr('class', 'element bar filled')\n            .style('pointer-events', 'none')\n        }\n\n        // Define selection update operations on merged data\n        function updateState(selection) {\n          selection\n            .each(function(d) {\n              var width = w, left = x(d) - width/2, \n              c = y1, d = y2(d), top = Math.min(c,d), height = Math.max(1e-6, Math.abs(c-d));\n              this.r = {x:left, y:top, w:width, h:height};\n            })\n            .attr('x', function(d) { return this.r.x })\n            .attr('y', function(d) { return this.r.y })\n            .attr('width', function(d) { return this.r.w })\n            .attr('height', function(d) { return this.r.h })\n            .filter(BrunelD3.hasData)                     // following only performed for data items\n            .style('fill', color);\n        }\n\n        // Define labeling for the selection\n        function label(selection, transitionMillis) {\n          BrunelD3.label(selection, labels, transitionMillis, geom, labeling);\n        }\n        // Create selections, set the initial state and transition updates\n        selection = main.selectAll('.element').data(data._rows, function(d) { return d.key });\n        var added = selection.enter().append('rect');\n        merged = selection.merge(added);\n        initialState(added);\n        selection.filter(BrunelD3.hasData)\n          .classed('selected', BrunelD3.isSelected(data))\n          .filter(BrunelD3.isSelected(data)).raise();\n        updateState(BrunelD3.transition(merged, transitionMillis));\n        label(merged, transitionMillis);\n\n        BrunelD3.transition(selection.exit(), transitionMillis/3)\n          .style('opacity', 0.5).each( function() {\n            this.remove(); BrunelD3.removeLabels(this); \n        });\n      }\n\n      return {\n        data:           function() { return processed },\n        original:       function() { return original },\n        internal:       function() { return data },\n        selection:      function() { return merged },\n        makeData:       makeData,\n        build:          build,\n        chart:          function() { return charts[0] },\n        group:          function() { return elementGroup },\n        fields: {\n          x:            ['TYPE'],\n          y:            ['COUNT'],\n          key:          ['TYPE'],\n          color:        ['COUNT']\n        }\n      };\n    }();\n\n    function build(time, noData) {\n      var first = elements[0].data() == null;\n      if (first) time = 0;                                           // no transition for first call\n      buildAxes(time);\n      if ((first || time > -1) && !noData) {\n        elements[0].makeData();\n        BrunelD3.addLegend(legends, legends._legend);\n      }\n      elements[0].build(time);\n    }\n\n    // Expose the following components of the chart\n    return {\n      elements : elements,\n      interior : interior,\n      scales: {x:scale_x, y:scale_y},\n      zoom: function(params, time) {\n          if (params) zoom.on('zoom').call(zoomNode, params, time);\n          return d3.zoomTransform(zoomNode);\n      },\n      build : build\n    };\n    }();\n\n  function setData(rowData, i) { datasets[i||0] = BrunelD3.makeData(rowData) }\n  function updateAll(time) { charts.forEach(function(x) {x.build(time || 0)}) }\n  function buildAll() {\n    for (var i=0;i<arguments.length;i++) setData(arguments[i], i);\n    updateAll(transitionTime);\n  }\n\n  return {\n    dataPreProcess:     function(f) { if (f) pre = f; return pre },\n    dataPostProcess:    function(f) { if (f) post = f; return post },\n    data:               function(d,i) { if (d) setData(d,i); return datasets[i||0] },\n    visId:              visId,\n    build:              buildAll,\n    rebuild:            updateAll,\n    charts:             charts\n  }\n}\n\n// Data Tables /////////////////////////////////////////////////////////////////////////////////////\n\nvar table1 = {\n   summarized: false,\n   names: ['TYPE', 'COUNT'], \n   options: ['string', 'numeric'], \n   rows: [['NA', 944], ['\u4e00\u822c\u5ba2\u6237', 24633], ['\u4f4e\u4ef7\u503c\u5ba2\u6237', 12119], ['\u91cd\u8981\u4fdd\u6301\u5ba2\u6237', 5340], ['\u91cd\u8981\u53d1\u5c55\u5ba2\u6237', 4232],\n  ['\u91cd\u8981\u633d\u7559\u5ba2\u6237', 15720]]\n};\n\n// Call Code to Build the system ///////////////////////////////////////////////////////////////////\n\nvar v  = new BrunelVis('visid10dec9dc-c854-11e7-a681-002590fb6b10');\nBrunelD3.animateBuild(v, table1, 2000);\n\n    });\n});", 
                        "text/plain": "<IPython.core.display.Javascript object>"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "%brunel data('type_count') bar x(TYPE) y(COUNT) color(COUNT) label(COUNT) style('.label{fill:white;text-shadow:none}') sort(TYPE) effect(enter:2000)  title(\"\u822a\u7a7a\u516c\u53f8\u5ba2\u6237\u7c7b\u578b\u7edf\u8ba1\")  axes(y:2000:grid:\"\u6570\u91cf\",x:6:\"\u5ba2\u6237\u79cd\u7c7b\"):: width=800, height=300"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "<a id=\"lrfmc_5_3\"></a>\n### 5.3 \u9488\u5bf9[\u91cd\u8981\u53d1\u5c55\u5ba2\u6237]\u505a\u5730\u5740\u548c\u5e74\u9f84\u5206\u5e03\u7edf\u8ba1"
        }, 
        {
            "execution_count": 302, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "output_type": "stream", 
                    "name": "stdout", 
                    "text": "           LOCATION  COUNT\n0                       81\n1                 -     14\n2          96081184      1\n3           BEIJING      1\n4  BRIARCLIFF\u3000MANOL      1\n"
                }
            ], 
            "source": "#\u7b5b\u9009\u51fa\u4e2d\u56fd\u7684\u6570\u636e\ndf_data_1_type_1 = df_data_1[(df_data_1.TYPE == '\u91cd\u8981\u53d1\u5c55\u5ba2\u6237') & (df_data_1.WORK_COUNTRY == 'CN')].copy()\ndf_data_1_type_1.WORK_PROVINCE = df_data_1_type_1.WORK_PROVINCE.replace(r'\\\u7701','',regex=True)\ndf_data_1_type_1.WORK_PROVINCE = df_data_1_type_1.WORK_PROVINCE.replace(r'\\\u5e02|\\.','',regex=True)\n#df_data_1_type_1 = df_data_1_type_1.dropna()\n#\u53bb\u9664\u5730\u5740\u4e0d\u6b63\u786e\u7684\u6570\u636e\n#del_array = ['*', '-', '.','.\u5317\u4eac','BEIJING','BEIJING','BRIARC','Beijing','Beijing','HONGKONG','HRB','HRB','IRVINE','LEEWOLDE','N','N','OSAKA','PARIS','STANLEY','TOKYO','leon','rotteadam','stratford','\u3002','\u3002','\u3002','\u3002']\n#df_data_1_type_1_tmp = df_data_1_type_1[~ df_data_1_type_1.WORK_CITY.isin(del_array)]\n#df_data_1_type_1_tmp['COUNT'] = 1\ndf_data_1_type_1_tmp_group = df_data_1_type_1.groupby('WORK_PROVINCE').size().reset_index()\ndf_data_1_type_1_tmp_group.columns = ['LOCATION','COUNT']\nprint(df_data_1_type_1_tmp_group.head(5))"
        }, 
        {
            "metadata": {}, 
            "cell_type": "markdown", 
            "source": "##### \u91cd\u8981\u53d1\u5c55\u5ba2\u6237\u5730\u5740\u5206\u5e03"
        }, 
        {
            "execution_count": 303, 
            "metadata": {}, 
            "cell_type": "code", 
            "outputs": [
                {
                    "metadata": {}, 
                    "output_type": "display_data", 
                    "data": {
                        "text/html": "<!--\n  ~ Copyright (c) 2015 IBM Corporation and others.\n  ~\n  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n  ~ You may not use this file except in compliance with the License.\n  ~ You may obtain a copy of the License at\n  ~\n  ~     http://www.apache.org/licenses/LICENSE-2.0\n  ~\n  ~ Unless required by applicable law or agreed to in writing, software\n  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  ~ See the License for the specific language governing permissions and\n  ~ limitations under the License.\n  -->\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/brunel.2.3.css\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/sumoselect.css\">\n\n<style>\n    \n</style>\n\n<div id=\"controlsid10e8dcc4-c854-11e7-a681-002590fb6b10\" class=\"brunel\"/>\n<svg id=\"visid10e8db2a-c854-11e7-a681-002590fb6b10\" width=\"800\" height=\"500\"></svg>", 
                        "text/plain": "<IPython.core.display.HTML object>"
                    }
                }, 
                {
                    "execution_count": 303, 
                    "metadata": {}, 
                    "data": {
                        "application/javascript": "/*\n * Copyright (c) 2015 IBM Corporation and others.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * You may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nrequire.config({\n    waitSeconds: 60,\n    paths: {\n        'd3': '//cdnjs.cloudflare.com/ajax/libs/d3/4.2.1/d3.min',\n        'topojson': '//cdnjs.cloudflare.com/ajax/libs/topojson/1.6.20/topojson.min',\n        'brunel' : '/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/brunel.2.3.min',\n        'brunelControls' : '/data/jupyter2/0f38c55d-ff69-4b0d-af31-bf990ab5b3ef/nbextensions/brunel_ext/brunel.controls.2.3.min'\n    },\n    shim: {\n       'brunel' : {\n            exports: 'BrunelD3',\n            deps: ['d3', 'topojson'],\n            init: function() {\n               return {\n                 BrunelD3 : BrunelD3,\n                 BrunelData : BrunelData\n              }\n            }\n        },\n       'brunelControls' : {\n            exports: 'BrunelEventHandlers',\n            init: function() {\n               return {\n                 BrunelEventHandlers: BrunelEventHandlers,\n                 BrunelJQueryControlFactory: BrunelJQueryControlFactory\n              }\n            }\n        }\n\n    }\n\n});\n\nrequire([\"d3\"], function(d3) {\n    require([\"brunel\", \"brunelControls\"], function(brunel, brunelControls) {\n        function  BrunelVis(visId) {\n  \"use strict\";                                                                       // strict mode\n  var datasets = [],                                      // array of datasets for the original data\n      pre = function(d, i) { return d },                         // default pre-process does nothing\n      post = function(d, i) { return d },                       // default post-process does nothing\n      transitionTime = 200,                                        // transition time for animations\n      charts = [],                                                       // the charts in the system\n      vis = d3.select('#' + visId).attr('class', 'brunel');                     // the SVG container\n\n  BrunelD3.addDefinitions(vis);                                   // ensure standard symbols present\n\n  // Define chart #1 in the visualization //////////////////////////////////////////////////////////\n\n  charts[0] = function(parentNode, filterRows) {\n    var geom = BrunelD3.geometry(parentNode || vis.node(), 0, 0, 1, 1, 22, 0, 0, 77),\n      elements = [];                                              // array of elements in this chart\n\n    // Define groups for the chart parts ///////////////////////////////////////////////////////////\n\n    var chart =  vis.append('g').attr('class', 'chart1')\n      .attr('transform','translate(' + geom.chart_left + ',' + geom.chart_top + ')');\n    var overlay = chart.append('g').attr('class', 'element').attr('class', 'overlay');\n    var zoom = d3.zoom().scaleExtent([1/5,5]);\n    var zoomNode = overlay.append('rect').attr('class', 'overlay')\n      .attr('x', geom.inner_left).attr('y', geom.inner_top)\n      .attr('width', geom.inner_rawWidth).attr('height', geom.inner_rawHeight)\n      .style('cursor', 'move').call(zoom)\n      .node();\n    zoomNode.__zoom = d3.zoomIdentity;\n    chart.append('rect').attr('class', 'background').attr('width', geom.chart_right-geom.chart_left).attr('height', geom.chart_bottom-geom.chart_top);\n    var interior = chart.append('g').attr('class', 'interior zoomNone')\n      .attr('transform','translate(' + geom.inner_left + ',' + geom.inner_top + ')')\n      .attr('clip-path', 'url(#clip_visid10e8db2a-c854-11e7-a681-002590fb6b10_chart1_inner)');\n    interior.append('rect').attr('class', 'inner').attr('width', geom.inner_width).attr('height', geom.inner_height);\n    var gridGroup = interior.append('g').attr('class', 'grid');\n    var legends = chart.append('g').attr('class', 'legend')\n      .attr('transform','translate(' + (geom.chart_right-geom.chart_left - 3) + ',' + 0 + ')');\n    vis.append('clipPath').attr('id', 'clip_visid10e8db2a-c854-11e7-a681-002590fb6b10_chart1_inner').append('rect')\n      .attr('x', 0).attr('y', 0)\n      .attr('width', geom.inner_rawWidth+1).attr('height', geom.inner_rawHeight+1);\n\n    // Projection //////////////////////////////////////////////////////////////////////////////////\n\n    var base = d3.geoMercator()\n      .translate([geom.inner_width/2, geom.inner_height/2])\n      .scale(Math.min((geom.inner_width-4)/1.2811, (geom.inner_height-4)/1.0169))\n      .center([104.185, 38.0664])\n    function projection(p) {\n        var q = base(p), t = d3.zoomTransform(zoomNode);\n        return q ? [t.k*q[0]+t.x, t.k*q[1]+t.y] : null;\n    };\n    function project_center(v) { return (v ? projection([v.c, v.d]) : null) || [-9e6, -9e6] };\n    var path = d3.geoPath().projection(BrunelD3.geoStream(projection));\n    chart.append('text').attr('class', 'title header').text('\u91cd\u8981\u53d1\u5c55\u5ba2\u6237\u6570\u91cf\u5206\u5e03').style('text-anchor', 'middle')\n      .attr('x','50%')\n      .attr('y',2).attr('dy','0.8em');\n    var scale_x = d3.scaleLinear(), scale_y = d3.scaleLinear();\n    var base_scales = [scale_x, scale_y];                           // untransformed original scales\n    zoom.on('zoom', function(t, time) {\n        t = t || d3.event.transform;\n        zoomNode.__zoom = t;\n        interior.attr('class', 'interior ' + BrunelD3.zoomLabel(t.k));;\n        build(time || -1);\n    });\n\n    // Define element #1 ///////////////////////////////////////////////////////////////////////////\n\n    elements[0] = function() {\n      var original, processed,                           // data sets passed in and then transformed\n        element, data,                                 // brunel element information and brunel data\n        selection, merged;                                      // d3 selection and merged selection\n      var elementGroup = interior.append('g').attr('class', 'element1'),\n        main = elementGroup.append('g').attr('class', 'main'),\n        labels = BrunelD3.undoTransform(elementGroup.append('g').attr('class', 'labels').attr('aria-hidden', 'true'), elementGroup);\n\n      function makeData() {\n        original = datasets[0];\n        if (filterRows) original = original.retainRows(filterRows);\n        processed = pre(original, 0);\n        processed = post(processed, 0);\n        var f0 = processed.field('LOCATION'),\n          f1 = processed.field('COUNT'),\n          f2 = processed.field('#row'),\n          f3 = processed.field('#selection');\n        var keyFunc = function(d) { return f2.value(d) };\n        data = {\n          LOCATION:     function(d) { return f0.value(d.row) },\n          COUNT:        function(d) { return f1.value(d.row) },\n          $row:         function(d) { return f2.value(d.row) },\n          $selection:   function(d) { return f3.value(d.row) },\n          LOCATION_f:   function(d) { return f0.valueFormatted(d.row) },\n          COUNT_f:      function(d) { return f1.valueFormatted(d.row) },\n          $row_f:       function(d) { return f2.valueFormatted(d.row) },\n          $selection_f: function(d) { return f3.valueFormatted(d.row) },\n          _split:       function(d) { return f1.value(d.row) },\n          _key:         keyFunc,\n          _rows:        BrunelD3.makeRowsWithKeys(keyFunc, processed.rowCount())\n        };\n      }\n      // Aesthetic Functions\n      var scale_color = d3.scaleLog().domain([1, 5.8093953, 33.749074, 196.06171, 1139])\n        .interpolate(d3.interpolateHcl)\n        .range([ '#f1eef6', '#bdc9e1', '#74a9cf', '#2b8cbe', '#045a8d']);\n      var color = function(d) { return scale_color(data.COUNT(d)) };\n      legends._legend = legends._legend || { title: ['COUNT'], \n        ticks: [10000, 1000, 100, 10, 1]};\n      legends._legend.color = scale_color;\n\n      // Build element from data ///////////////////////////////////////////////////////////////////\n\n      function build(transitionMillis) {\n        element = elements[0];\n        // Read in the feature data and call build again when done\n        var features = {\n          'https://brunelvis.org/geo/2.3/med/China.json': {'BEIJING':517, 'Beijing':517, \n                '\u4e0a\u6d77':538, '\u4e91\u5357':530, '\u5185\u8499\u53e4':541, '\u5317\u4eac':517, '\u5409\u6797':540, '\u56db\u5ddd':529, '\u5929\u6d25':535, \n                '\u5b81\u590f':524, '\u5b89\u5fbd':519, '\u5c71\u4e1c':534, '\u5c71\u897f':526, '\u5e7f\u4e1c':520, '\u5e7f\u897f':514, '\u65b0\u7586':522, \n                '\u6c5f\u82cf':537, '\u6c5f\u897f':536, '\u6cb3\u5317':531, '\u6cb3\u5357':532, '\u6d59\u6c5f':539, '\u6d77\u5357':523, '\u6e56\u5317':527, \n                '\u6e56\u5357':528, '\u7518\u8083':512, '\u798f\u5efa':518, '\u897f\u85cf':521, '\u897f\u85cf\u81ea\u6cbb\u533a':521, '\u8d35\u5dde':515, \n                '\u8fbd\u5b81':533, '\u91cd\u5e86':516, '\u9655\u897f':525, '\u9752\u6d77':513, '\u9ed1\u9f99\u6c5f':542\n          }\n        };\n        if (BrunelD3.addFeatures(data, features, null, data.LOCATION, this, transitionMillis)) return;\n        main.attr('class', 'diagram map');\n        var labeling  = [{\n          where: function(box,text,d) {var p = project_center(d.geo_properties); return {box:box, x:p[0], y:p[1]}},\n          fit: true, granularity: 2,\n          content: function(d) {\n            return d.row == null ? null : data.LOCATION_f(d)\n          }\n        }];\n\n        // Define selection entry operations\n        function initialState(selection) {\n          selection\n            .attr('class', 'element polygon filled')\n            .classed('nondata', function(d) {return !d || d.row == null})\n        }\n\n        // Define selection update operations on merged data\n        function updateState(selection) {\n          selection\n            .attr('d', function(d) { return path(d).replace(/,L/g, 'L').replace(/,Z/g, 'Z') })\n            .filter(BrunelD3.hasData)                     // following only performed for data items\n            .style('fill', color);\n        }\n\n        // Define labeling for the selection\n        function label(selection, transitionMillis) {\n          BrunelD3.label(selection, labels, transitionMillis, geom, labeling);\n\n          var tooltipLabeling  = {\n            where: function(box,text,d) {var p = project_center(d.geo_properties); return {box:box, x:p[0], y:p[1]}},\n            fit: true, granularity: 0,\n            content: function(d) {\n              return d.row == null ? null : '<span class=\"title\">LOCATION: </span>'\n\t\t\t+ '<span class=\"field\">' + data.LOCATION_f(d) + '</span>'\n\t\t\t+ '<br/>'\n\t\t\t+ '<span class=\"title\">COUNT: </span>'\n\t\t\t+ '<span class=\"field\">' + data.COUNT_f(d) + '</span>'\n            }\n          };\n          BrunelD3.addTooltip(selection, tooltipLabeling, geom);\n        }\n        // Create selections, set the initial state and transition updates\n        selection = main.selectAll('.element').data(data._rows, function(d) { return d.key });\n        var added = selection.enter().append('path');\n        merged = selection.merge(added);\n        initialState(added);\n        selection.filter(BrunelD3.hasData)\n          .classed('selected', BrunelD3.isSelected(data))\n          .filter(BrunelD3.isSelected(data)).raise();\n        updateState(BrunelD3.transition(merged, transitionMillis));\n        label(merged, transitionMillis);\n\n        BrunelD3.transition(selection.exit(), transitionMillis/3)\n          .style('opacity', 0.5).each( function() {\n            this.remove(); BrunelD3.removeLabels(this); \n        });\n        merged                                                     // attach handlers to the element\n          .on('mouseover.interact', function(d) {BrunelD3.select(d, this, element, updateAll) })\n          .on('mouseout.interact', function(d) {BrunelD3.select(null, this, element, updateAll) });\n      }\n\n      return {\n        data:           function() { return processed },\n        original:       function() { return original },\n        internal:       function() { return data },\n        selection:      function() { return merged },\n        makeData:       makeData,\n        build:          build,\n        chart:          function() { return charts[0] },\n        group:          function() { return elementGroup },\n        fields: {\n          x:            ['LOCATION'],\n          key:          ['#row'],\n          color:        ['COUNT']\n        }\n      };\n    }();\n\n    function build(time, noData) {\n      var first = elements[0].data() == null;\n      if (first) time = 0;                                           // no transition for first call\n      if ((first || time > -1) && !noData) {\n        elements[0].makeData();\n        BrunelD3.addLegend(legends, legends._legend);\n      }\n      elements[0].build(time);\n    }\n\n    // Expose the following components of the chart\n    return {\n      elements : elements,\n      interior : interior,\n      zoom: function(params, time) {\n          if (params) zoom.on('zoom').call(zoomNode, params, time);\n          return d3.zoomTransform(zoomNode);\n      },\n      build : build\n    };\n    }();\n\n  function setData(rowData, i) { datasets[i||0] = BrunelD3.makeData(rowData) }\n  function updateAll(time) { charts.forEach(function(x) {x.build(time || 0)}) }\n  function buildAll() {\n    for (var i=0;i<arguments.length;i++) setData(arguments[i], i);\n    updateAll(transitionTime);\n  }\n\n  return {\n    dataPreProcess:     function(f) { if (f) pre = f; return pre },\n    dataPostProcess:    function(f) { if (f) post = f; return post },\n    data:               function(d,i) { if (d) setData(d,i); return datasets[i||0] },\n    visId:              visId,\n    build:              buildAll,\n    rebuild:            updateAll,\n    charts:             charts\n  }\n}\n\n// Data Tables /////////////////////////////////////////////////////////////////////////////////////\n\nvar table1 = {\n   summarized: false,\n   names: ['LOCATION', 'COUNT'], \n   options: ['string', 'numeric'], \n   rows: [[null, 81], ['-', 14], ['96081184', 1], ['BEIJING', 1], ['BRIARCLIFF\u3000MANOL', 1],\n  ['Beijing', 1], ['FLEVV LAND', 1], ['HONGKANG', 1], ['HONGKONG', 1], ['N', 2], ['OSAKA', 1],\n  ['PARIS', 1], ['SAN JUAN METRO MANILA', 1], ['`', 4], ['ca', 1], ['ontario', 1], ['zh', 1],\n  ['\u3000\u3000', 1], ['\u4e0a\u6d77', 392], ['\u4e0a\u6d7722', 1], ['\u4e91\u5357', 14], ['\u5185\u8499\u53e4', 10], ['\u5317', 1], ['\u5317\u4eac', 1139], ['\u5317\u4eac\u5267', 1],\n  ['\u5357\u4eac', 1], ['\u53a6\u95e8', 1], ['\u53f0\u6e7e', 4], ['\u5409\u6797', 157], ['\u54c8\u5c14\u6ee8', 1], ['\u56db\u5ddd', 31], ['\u5927\u5b66', 1], ['\u5927\u8fde', 1],\n  ['\u5929\u6d25', 30], ['\u5b81\u590f', 1], ['\u5b89\u5fbd', 9], ['\u5c71\u4e1c', 43], ['\u5c71\u897f', 6], ['\u5e7f\u4e1c', 687], ['\u5e7f\u5dde', 3], ['\u5e7f\u5dde\u573a\u90e8', 1],\n  ['\u5e7f\u897f', 18], ['\u5f90\u5dde', 1], ['\u65b0\u5f4a', 1], ['\u65b0\u7586', 49], ['\u65b0\u7586\u7ef4\u543e\u5c14', 1], ['\u65b0\u7586\u81ea\u6cbb\u533a', 1], ['\u676d\u5dde', 1], ['\u6b66\u6c49', 1],\n  ['\u6c5f\u82cf', 41], ['\u6c5f\u897f', 1], ['\u6c5f\u95e8', 1], ['\u6cb3\u5317', 18], ['\u6cb3\u5357', 109], ['\u6cb3\u5357', 1], ['\u6d59\u6c5f', 44], ['\u6d77\u5357', 17],\n  ['\u6df1\u5733', 2], ['\u6e56\u5317', 64], ['\u6e56\u5357', 53], ['\u73e0\u6d77', 1], ['\u7518\u8083', 7], ['\u798f\u5dde', 1], ['\u798f\u5efa', 72], ['\u897f\u85cf', 2],\n  ['\u897f\u85cf\u81ea\u6cbb\u533a', 1], ['\u8d35\u5dde', 25], ['\u8d35\u9633', 1], ['\u8fbd\u5b81', 297], ['\u91cd\u5e86', 19], ['\u957f\u6625', 2], ['\u9655\u897f', 16], ['\u9752\u6d77', 6],\n  ['\u9999\u6e2f', 1], ['\u9ed1\u9f99\u6c5f', 64], ['\uff0d', 1]]\n};\n\n// Call Code to Build the system ///////////////////////////////////////////////////////////////////\n\nvar v  = new BrunelVis('visid10e8db2a-c854-11e7-a681-002590fb6b10');\nv.build(table1);\n\n    });\n});", 
                        "text/plain": "<IPython.core.display.Javascript object>"
                    }, 
                    "output_type": "execute_result"
                }
            ], 
            "source": "%brunel data('df_data_1_type_1_tmp_group') map('china')  x(LOCATION) color(COUNT:blues) label(LOCATION) tooltip(LOCATION,#all) legends(auto) interaction(select:mouseover) title(\"\u91cd\u8981\u53d1\u5c55\u5ba2\u6237\u6570\u91cf\u5206\u5e03\") :: width=800,height=500"
        }, 
        {
            "metadata": {
                "collapsed": true
            }, 
            "cell_type": "markdown", 
            "source": "##### \u91cd\u8981\u53d1\u5c55\u5ba2\u6237\u5e74\u9f84\u7edf\u8ba1"
        }, 
        {
            "execution_count": 311, 
            "metadata": {
                "scrolled": false
            }, 
            "cell_type": "code", 
            "outputs": [
                {
                    "metadata": {}, 
                    "output_type": "display_data", 
                    "data": {
                        "text/plain": "<matplotlib.figure.Figure at 0x7f724014fe80>", 
                        "image/png": "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\n"
                    }
                }
            ], 
            "source": "data_age_m = df_data_1_type_1_tmp[df_data_1_type_1_tmp.GENDER=='\u7537'].AGE.dropna() #\u7537\u6027\u5e74\u9f84\u5206\u5e03\ndata_age_f = df_data_1_type_1_tmp[df_data_1_type_1_tmp.GENDER=='\u5973'].AGE.dropna() #\u5973\u6027\u5e74\u9f84\u5206\u5e03\nf, (ax1,ax2) = plt.subplots(2)\ns1 = sns.kdeplot(data_age_f,data_age_f,shade=True,cmap=\"Reds\",shade_lowest=False,legend=True,ax=ax1,sharex=True)\ns2 = sns.kdeplot(data_age_m,data_age_m,shade=True,cmap=\"Blues\",shade_lowest=False,legend=True,ax=ax2,sharex=True)\nax1.legend('',title=\"Female\")\nax2.legend('',title=\"Male\")\n'''\nax.get_legend().get_title().set_fontsize(\"14\")\nnum = 0\ncolors = ['#FF0000','#0000CD']\nfor t in ax.get_legend().get_texts():\n    t.set_fontsize('12')    # the legend text fontsize\n    t.set_color(colors[num])    # the legend text color\n    num = num + 1\n'''\nplt.show()"
        }, 
        {
            "execution_count": null, 
            "metadata": {
                "collapsed": true
            }, 
            "cell_type": "code", 
            "outputs": [], 
            "source": ""
        }
    ], 
    "nbformat_minor": 1
}